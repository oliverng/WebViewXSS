//
//  ViewController.m
//  WebViewXSS
//
//  Created by Oliver and Vienne Ng on 9/4/15.
//  Copyright (c) 2015 ONG. All rights reserved.
//

#import "ViewController.h"

@interface ViewController ()

@end

@implementation ViewController

@synthesize myWebView;


- (void)viewDidLoad {
  [super viewDidLoad];
  
  // NOTE: there are two external files referenced within this project
  // test.html - the local file being loaded into WebView
  // findme.txt - the data being loaded into an iframe from test.html to demonstrate access to local FS
}


- (IBAction)loadWebViewLocal:(id)sender{
  
  // we are loading a local file, so we need the bundle path if we want simulator access
  NSString *localPath = [[NSBundle mainBundle] pathForResource:@"test" ofType:@"html"];
  NSString *localURL = [NSString stringWithFormat:@"file://%@", localPath];
  
  NSLog(@"Loading from file path: %@", localURL);
  
  // Note that using LoadRequest againsta  local file, SOP allows for local file inclusion
  // We are able to access the image and test file on the local file system.
  [myWebView loadRequest:[NSURLRequest requestWithURL:[NSURL URLWithString:localPath]]];
  
  // Create helper note
  [self createAlert:@"Using loadRequest() notice there are no restrictions on local file access. Images load fine."];
}

- (IBAction)testSOPAppleWeb:(id)sender{
  
  // get the file path and load contents directly into NSString as we will use UIWebView:loadHTMLString
  NSError *error = nil;
  NSString *localPath = [[NSBundle mainBundle] pathForResource:@"test" ofType:@"html"];
  NSString *htmlCode = [NSString stringWithContentsOfFile:localPath encoding:NSUTF8StringEncoding error:&error];
  
  // TEST 2 - SOP from appleweb://
  [myWebView loadHTMLString:htmlCode baseURL:nil];
  
  // Create helper note
  [self createAlert:@"When baseURL:nil is set, notice the alert is generated by appleweb:// which also has local file access. Notice the path to image is not found, but iOS has tried as you can see the blue questionmark."];
}

- (IBAction)testSOPAboutBlank:(id)sender{

  // get the file path and load contents directly into NSString as we will use UIWebView:loadHTMLString
  NSError *error = nil;
  NSString *localPath = [[NSBundle mainBundle] pathForResource:@"test" ofType:@"html"];
  NSString *htmlCode = [NSString stringWithContentsOfFile:localPath encoding:NSUTF8StringEncoding error:&error];

  // TEST 1 - SOP from About:blank
  [myWebView loadHTMLString:htmlCode baseURL:[NSURL URLWithString:@"about:blank"]];
  
  [self createAlert:@"When baseURL is set to about:blank, SOP is fully restricted to only this webpage origin. No local file access is possible so both the iframe and image do not display any content - strict security option."];

}

- (IBAction)testSOPFromBundle:(id)sender{
  
  // get the file path and load contents directly into NSString as we will use UIWebView:loadHTMLString
  NSError *error = nil;
  NSString *localPath = [[NSBundle mainBundle] pathForResource:@"test" ofType:@"html"];
  NSString *htmlCode = [NSString stringWithContentsOfFile:localPath encoding:NSUTF8StringEncoding error:&error];
  
  // get the bundle path URL for the local folder directory
  NSURL *bundlePathURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] bundlePath]];
    
  // TEST 3 - SOP from baseURL set to resource bundle
  [myWebView loadHTMLString:htmlCode baseURL:bundlePathURL];

  
  [self createAlert:@"When baseURL:bundlePath, then everything loads as expected with local file access and remote internet access."];

}



- (IBAction)testXSS:(id)sender{

  // Try document.location.assign('url here') to redirect as a script tag
  // JS in webView is limited - still possible to XSS

  NSString *name = self.nameTxtFld.text;
  NSString *htmlCode = [NSString stringWithFormat:@"<html><body>Hello %@", name];
  
  [myWebView loadHTMLString:htmlCode baseURL:[NSURL URLWithString:@"about:blank"]];
  
}


- (IBAction)loadWebViewInternet:(id)sender{
  
  // Generate URL request object for WebView
  NSString *urlstr = @"https://www.securitycompass.com/";
  NSURL *url =[NSURL URLWithString:urlstr];
  NSURLRequest *urlRequest = [NSURLRequest requestWithURL:url];
  
  //OPTION 1 - Load Direct
  [myWebView loadRequest:urlRequest];
  
  [self createAlert:@"Using loadRequest(), we accept we have zero control over where this page goes after the first request.  For the first call, use HTTPS if possible to prevent MITM attacks. After that, user is on their own and why it is best to launch Safari vs UIWebView."];

}

- (IBAction)loadSafariInternet:(id)sender{

  // Generate URL request object for WebView
  NSString *urlstr = @"https://www.securitycompass.com/";
  NSURL *url =[NSURL URLWithString:urlstr];
  
  //OPTION 2 - Load Safari
  [[UIApplication sharedApplication] openURL:url];
  
  
}


- (void)createAlert:(NSString *)messageStr{
  // generate standard alert box with option to use a custom message
  UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Look!"
                                                  message:messageStr
                                                 delegate:self
                                        cancelButtonTitle:@"Uh huh."
                                        otherButtonTitles:nil];
  [alert show];
}


- (void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}

@end
